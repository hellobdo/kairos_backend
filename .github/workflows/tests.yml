name: Tests

on:
  push:
    branches: [ main, master ]
    paths:
      - 'api/ibkr.py'
      - 'analytics/broker_cash.py'
      - 'analytics/broker_executions.py'
      - 'analytics/process_trades.py'
      - 'utils/db_utils.py'
      - 'utils/pandas_utils.py'
      - 'utils/process_executions_utils.py'
      - 'indicators/helpers/column_utils.py'
      - 'indicators/*.py'
      - 'backtests/utils/backtest_functions.py'
      - 'backtests/utils/process_executions.py'
      - 'backtests/utils/process_backtest.py'
      - 'tests/api/test_ibkr_api.py'
      - 'tests/analytics/test_broker_cash.py'
      - 'tests/analytics/test_broker_executions.py'
      - 'tests/analytics/test_process_trades.py'
      - 'tests/utils/test_db_utils.py'
      - 'tests/utils/test_pandas_utils.py'
      - 'tests/utils/test_process_executions_utils.py'
      - 'tests/indicators/test_column_utils.py'
      - 'tests/indicators/test_indicators.py'
      - 'tests/backtests/test_backtest_functions.py'
      - 'tests/backtests/test_process_executions.py'
      - 'tests/backtests/test_process_backtest.py'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'api/ibkr.py'
      - 'analytics/broker_executions.py'
      - 'analytics/broker_cash.py'
      - 'analytics/process_trades.py'
      - 'utils/db_utils.py'
      - 'utils/pandas_utils.py'
      - 'utils/process_executions_utils.py'
      - 'indicators/helpers/column_utils.py'
      - 'indicators/*.py'
      - 'backtests/utils/backtest_functions.py'
      - 'backtests/utils/process_executions.py'
      - 'backtests/utils/process_backtest.py'
      - 'tests/api/test_ibkr_api.py'
      - 'tests/analytics/test_broker_cash.py'
      - 'tests/analytics/test_broker_executions.py'
      - 'tests/analytics/test_process_trades.py'
      - 'tests/utils/test_db_utils.py'
      - 'tests/utils/test_pandas_utils.py'
      - 'tests/utils/test_process_executions_utils.py'
      - 'tests/indicators/test_column_utils.py'
      - 'tests/indicators/test_indicators.py'
      - 'tests/backtests/test_backtest_functions.py'
      - 'tests/backtests/test_process_executions.py'
      - 'tests/backtests/test_process_backtest.py'
  workflow_dispatch:  # Allow manual triggering

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      test_modules: ${{ steps.set-test-modules.outputs.test_modules }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set test modules
        id: set-test-modules
        run: |
          # Explicitly list the test modules
          TEST_MODULES_JSON='["api.test_ibkr_api", "analytics.test_broker_cash", "analytics.test_broker_executions", "analytics.test_process_trades", "utils.test_db_utils", "utils.test_pandas_utils", "utils.test_process_executions_utils", "indicators.test_column_utils", "indicators.test_indicators", "backtests.test_backtest_functions", "backtests.test_process_executions", "backtests.test_process_backtest"]'
          
          # Set output for the test job
          echo "test_modules=$TEST_MODULES_JSON" >> $GITHUB_OUTPUT
          echo "Using test modules: $TEST_MODULES_JSON"

  test:
    needs: setup
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install any development dependencies
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      
      # Run each test module sequentially
      - name: Run all tests
        id: run_tests
        run: |
          # Get the list of test modules from the setup job
          TEST_MODULES='${{ needs.setup.outputs.test_modules }}'
          
          # Remove brackets and quotes, split into an array
          TEST_MODULES=$(echo $TEST_MODULES | tr -d '[]"' | tr ',' ' ')
          
          # Initialize failure tracking
          FAILED_MODULES=""
          FAILURE=false
          
          # Run each test module
          for module in $TEST_MODULES; do
            echo "::group::Running test module: $module"
            if python -m tests.$module; then
              echo "✅ Test module $module: SUCCESS"
            else
              echo "❌ Test module $module: FAILURE"
              FAILED_MODULES="$FAILED_MODULES $module"
              FAILURE=true
            fi
            echo "::endgroup::"
          done
          
          # Output summary
          echo "========== TEST SUMMARY =========="
          if [ "$FAILURE" = true ]; then
            echo "❌ Some tests failed: $FAILED_MODULES"
            exit 1
          else
            echo "✅ All tests passed successfully!"
          fi
        env:
          PYTHONPATH: ${{ github.workspace }}
          # Common test tokens
          IBKR_TOKEN_PAPER: "dummy_token_paper"
          IBKR_TOKEN_LIVE: "dummy_token_live"
          IBKR_QUERY_ID_CASH_PAPER: "dummy_query_paper"
          IBKR_QUERY_ID_CASH_LIVE: "dummy_query_live"
          IBKR_QUERY_ID_TRADE_CONFIRMATION_PAPER: "dummy_query_paper"
          IBKR_QUERY_ID_TRADE_CONFIRMATION_LIVE: "dummy_query_live"